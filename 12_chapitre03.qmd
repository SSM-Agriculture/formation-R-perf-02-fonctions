---
editor: 
  markdown: 
    wrap: 72
---

# Annexes: Pour aller plus loin {.backgroundTitre .unnumbered}

## Passer un nombre indéfini de paramètres {.backgroundTitre .unnumbered}

Il est possible de prévoir un nombre indéfini de paramètres lors de
l’élaboration d’une fonction avec `…` .

Cela permet d’accéder aux paramètres d’une "sous-fonction" utilisée dans
le corps de la fonction créée.

![](img/clipboard-chap3-1.png){fig-align="center"}

## Passer un nombre indéfini de paramètres {.backgroundTitre .unnumbered}

Les `…` permettent également de prévoir que l’utilisateur puisse passer
un nombre indéfini de paramètres

![](img/clipboard-chap3-2.png){fig-align="center"}

## Retourner plusieurs objets dans une fonction {.backgroundTitre .unnumbered}

L’instruction **return()** ne peut renvoyer qu’un seul objet ⇒ pour
renvoyer plusieurs éléments dans une fonction, il faut les **placer dans
une liste**

![](img/clipboard-chap3-3.png){fig-align="center"}

## Utiliser plusieurs Return dans une fonction {.backgroundTitre .unnumbered}

Il est possible de mettre plusieurs return dans le bloc d’instructions
d’une fonction.

-   =\> Dans ce cas, l’exécution s’arrête au premier return rencontré.

![](img/clipboard-chap3-4.png){fig-align="center"}

## Utilisation de Across: Règle de renommage {.backgroundTitre .unnumbered}

Une règle de renommage des variables issues de across peut être donnée
via l’argument *.names*.

On lui donne une chaîne de caractère concaténée où :

-   {.col} désigne la variable à traiter

-   {.fn} la fonction de traitement.

Par exemple : .names = "{.col}\_{.fn}"

[Si aucune règle de renommage n’est précisée, R se débrouille
:]{.underline}

-   Dans un mutate, les variables d’origine sont écrasées

-   Dans un summarise avec un seul agrégat à calculer, conserve le nom
    des variables d’origine

-   Dans un summarise avec plusieurs agrégats, suffixe la fonction
    d’agrégation au nom des variables d’origine

## Utilisation de Across: Règle de renommage {.backgroundTitre .unnumbered}

![](img/clipboard-chap3-5.png){fig-align="center"}

## {PURRR}: Contrôler le format de sortie {.backgroundTitre .unnumbered}

Possibilité de contrôler le format de sortie avec les dérivés de la
fonction map

![](img/clipboard-chap3-6.png){fig-align="center"}

![](img/clipboard-chap3-7.png){fig-align="center"}

## {PURRR}: Nommer les éléments d'une liste {.backgroundTitre .unnumbered}

Retour sur le calcul des évolutions départementales des populations par
composition familiale :

![](img/clipboard-chap3-8.png){fig-align="center"}

Par défaut, **les différents éléments de la liste résultats ne sont pas
nommés**. On ne peut accéder aux différents éléments que par index :

![](img/clipboard-chap3-9.png){fig-align="center"}

La fonction set_names du package purrr permet de nommer les éléments
d’une liste en entrée :

![](img/clipboard-chap3-10.png){fig-align="center"}

## {PURRR}: Modififer le comportement d'une fonction {.backgroundTitre .unnumbered}

Les fonctions de {purrr} ne renvoient un résultat que s’il n’y a aucune
erreur dans l’ensemble… sinon, l’exécution est arrêtée et aucun résultat
n’est retourné, même si l’erreur est à la fin !

![](img/clipboard-chap3-11.png){fig-align="center"}

## {PURRR}: Modififer le comportement d'une fonction {.backgroundTitre .unnumbered}

**safely()** ⇒ retourne le résultat et le message d’erreur de la
fonction

![](img/clipboard-chap3-12.png){fig-align="center"}

## {PURRR}: Modififer le comportement d'une fonction {.backgroundTitre .unnumbered}

**possibly(**) ⇒ retourne le résultat ou une valeur par défaut en cas
d’erreur

![](img/clipboard-chap3-13.png){fig-align="center"}
