---
editor: 
  markdown: 
    wrap: 72
---

# Package [purrr} {.backgroundTitre .unnumbered}

## Package [purrr}

![](img/clipboard-purrr1.png){fig-align="center"}

## [purrr} : Itérer sur un vecteur OU une liste

Objectif de **map()** ⇒ appliquer une même fonction à l’ensemble des
éléments d’un vecteur ou d’une liste  

<br>

::: columns
::: {.column width="50%"}
![](img/clipboard-purrr2.png){fig-align="center"}
:::

::: {.column width="50%"}
map() s’utilise sur un vecteur ou une liste d’objets. La syntaxe
générale est la suivante :

![](img/clipboard-purrr_0.png){fig-align="center"}
:::
:::


## [purrr} : Itérer sur un vecteur OU une liste

[Le traitement correspond à **la fonction** à appliquer]{.Terre_battue1}

⇒ on peut la renseigner de différentes manières :

-   1\) **Avec le nom de la fonction (sans parenthèse)** = lorsque la
    fonction n’a qu’un seul paramètre, qui est l’élément à traiter

![](img/clipboard-purrr3.png){fig-align="center"}

-   2\) **Avec une fonction anonyme**

    -   définie avec un \~ : les éléments successifs de la liste sont
        alors identifiés avec le mot clé .x

    ![](img/clipboard-purrr4.png)

    -   définie avec des paramètres

![](img/clipboard-purrr5.png){fig-align="center"}

## [purrr} : Itérer sur un vecteur OU une liste

![](img/clipboard-purrr6.png){fig-align="center"}

## [purrr} : Itérer sur un vecteur OU une liste

![](img/clipboard-purrr7.png){fig-align="center"}

## [purrr} : Itérer sur un vecteur OU une liste

Les écritures suivantes sont équivalentes :

![](img/clipboard-purrr_resume.png){fig-align="center"}

## [purrr} : Itérer sur un vecteur OU une liste

Il n’est pas nécessaire de créer une fonction en temps que telle : on
peut le faire directement à l’intérieur de map()

<br>

![](img/clipboard-purrr12.png){fig-align="center"}

## [purrr} : Itérer sur un vecteur OU une liste

Possibilité d’ajouter des arguments supplémentaires à la fonction à
appliquer

![](img/clipboard-purrr13.png){fig-align="center"}

![](img/clipboard-purrr14.png){fig-align="center"}

## [purrr} : Itérer sur deux éléments

Objectif de **map2()** = appliquer une même fonction sur chacun des
couples d’éléments de deux listes ou vecteurs

la fonction à appliquer peut être renseignée avec une fonction anonyme

-   définie avec un \~ : les éléments successifs de la liste sont alors
    identifiés avec les mots clé .x et .y

-   définie avec des paramètres

![](img/clipboard-purrr15.png){fig-align="center"}

## [purrr} : Généralisation

Généralisation avec la fonction **pmap()** = permet d’appliquer une même
fonction sur chacun des p-uplets d’éléments des différentes listes ou
vecteurs

![](img/clipboard-purrr16.png){fig-align="center"}

## [purrr} : Manipuler des listes

Les fonctions **map, map2** et **pmap** renvoient des listes

→ on peut retrouver des data.frame plus faciles à manipuler en utilisant
**bind_rows()**, ou la fonction **reduce()**

⇒ **bind_rows()** permet de concaténer une liste de tables


::: columns
::: {.column width="50%"}
![](img/clipboard-purrr17.png){fig-align="center"}
:::

::: {.column width="50%"}
![](img/clipboard-purrr18.png){fig-align="center"}
:::
:::


## [purrr} : Manipuler des listes



::: columns
::: {.column width="70%"}
⇒ **reduce()** applique une fonction de façon récursive à chaque élément
d’une liste ou d’un vecteur
:::

::: {.column width="30%"}
![](img/clipboard-purrr19.png){fig-align="center"}
:::
:::


![](img/clipboard-purrr20.png){fig-align="center"}

## [purrr} : Fonctions à effets de bord

<br>

Pour les fonctions qui ne renvoient aucun résultat, on utilise la
fonction **walk(**)

⇒ même fonctionnement que pour les fonctions map, mais spécifiques pour
les fonctions à effets de bord

<br>

*Exemples :* impression dans la console, affichage de graphiques, export
de données…

-   Extension à `walk2()` et `pwalk()`

## [purrr} : Fonctions à effets de bord

![](img/clipboard-purrr20.png){fig-align="center"}

## [purrr} : Fonctions à effets de bord

![](img/clipboard-purrr21.png){fig-align="center"}
